/**
*@swagger
* components:
*  schemas:
*   feedbacks:
*       type: object
*       required:
*           - dev_id
*           - feedback
*           - sender_id
*           - sender_name
*       properties:
*           _id:
*               type: string
*               description: autogenerated by DB
*           dev_id: 
*               type: string
*               description: User name
*           feedback:
*               type: string
*               description: Feedback shared by the sender
*           sender_id:
*               type: string
*               description: object id of the sender
*           sender_name:
*               type: string
*               description: name of the sender
*           createdAt:
*               type: string
*           updatedAt:
*               type: string
*       example:
*           _id: 6116609fb78f22baa9b97219
*           dev_id: 61165ed4fc5eadb95511314c
*           feedback: good work on the project. appreciate your efforts.
*           sender_id: 61165e075505ffb71bb9ca77
*           sender_name: test1
*           createdAt: 2021-08-13T12:07:59.880Z
*           updatedAt: 2021-08-13T12:07:59.880Z
*   feedback-forms:
*       type: object
*       required:
*           - sender_id
*           - sender_name
*           - submitted
*           - receiver_id
*           - receiver_name
*       properties:
*           _id:
*               type: string
*               description: autogenerated by MongoDB
*           sender_id: 
*               type: string
*               description: Object id of current user
*           sender_name:
*               type: string
*               description: Name of the sender
*           submitted:
*               type: boolean
*               default: false
*               description: status of the feedback form - value is set to true once user submits the feedback form
*           receiver_id:
*               type: string
*               description: object id of the receiver
*           receiver_name:
*               type: string
*               description: Name of the receiver
*       example:
*           _id: 61165fb0b78f22baa9b97208
*           sender_id: 61165e075505ffb71bb9ca77
*           sender_name: John
*           submitted: false
*           receiver_id: 61165ed4fc5eadb95511314c
*           receiver_name: Duke
*/ 

const express = require('express');
const auth = require('../middlewares/auth');
const feedbackController = require('../controllers/feedback.controller');

const feedbackRouter = new express.Router();

//main apis

/**
*@swagger
*path:
* /feedback/{id} :
*  post:
*     security:
*      - bearerAuth: []
*     tags: [Feedbacks]
*     summary: Share feedback for a user by submitting the object id of the feedback form and the feedback for the receiver
*     parameters:
*        - in: path
*          name: id
*          required: true
*          schema:
*            type: string
*          description: object id of the feedback form to be submitted
*     requestBody:
*         description: Add feedback for the receiver
*         required: true
*         content:
*             application/json:
*                 schema:
*                     $ref: '#/components/schemas/feedbacks'
*                 example:
*                     feedback: Good job on the project
*     responses:
*      200:
*       description: Got the user details
*       content:
*        application/json:
*         schema:
*          type: object
*/

feedbackRouter.post('/feedback/:id', auth.verifyToken, feedbackController.addFeedback, (req, res) => {
    res.json({ res });
})

/**
*@swagger
*path:
* /feedback:
*  get:
*      security:
*       - bearerAuth: []
*      tags: [Feedbacks]
*      summary: Get the list of feedbacks or feedback forms to be submitted
*      responses:
*       200:
*          description: Get the feedbacks forms to be submitted
*          content:
*            application/json:
*              scheme:
*                type: object
*                items:
*                  $ref: '#/components/schemas/feedback-forms'
*/

feedbackRouter.get('/feedback', auth.verifyToken, feedbackController.viewFeedbackForms, (req, res) => { res.json({ res }) })


//other apis for development purposes
feedbackRouter.delete('/deleteFeedbackForms', feedbackController.deleteAllForms, (req, res) => {
    res.json({ res });
})

feedbackRouter.post('/deleteFeedbacks', feedbackController.deleteAllFeedbacks, (req, res) => {
    res.json({ res });
})

//testing of adding feedback forms to each user
feedbackRouter.post('/addFeedbackForm', feedbackController.addFeedbackForm, (req, res) => {
    res.json({ res });
})

module.exports = feedbackRouter;
